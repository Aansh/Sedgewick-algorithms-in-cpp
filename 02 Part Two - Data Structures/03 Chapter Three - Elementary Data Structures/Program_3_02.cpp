/*
Program 3.2. Types of numbers

This program computes the average μ and standard deviation of a sequence x1,
x2, . . . ,xN of integers generated by the library procedure rand, following
the mathematical definitions

......

Note that a direct implementation from the definition of σ^2 requires one pass
to compute the average and another to compute the sums of the squares of the
differences between the members of the sequence and the average, but
rearranging the formula makes it possible for us to compute σ^2 in one pass
through the data.

We use the typedef declaration to localize reference to the fact that the type
of the data is int. For example, we could keep the typedef and the function
randNum in a separate file (referenced by an include directive), and then we
could use this program to test random numbers of a different type by changing
that file (see text).

Whatever the type of the data, the program uses ints for indices and floats to
compute the average and standard deviation, and will be effective only if
conversions from the data type to float are defined.
*/

#include <iostream>
#include <cstdlib>
#include <cmath>
using namespace std;

typedef int Number;

Number randNum() {
	return rand();
}

int main(int argc, char *argv[]) { 
	int N = atoi(argv[1]);
	float m1 = 0.0, m2 = 0.0;
	for (int i = 0; i < N; i++) {
		Number x  = randNum();
		m1 += ((float) x)/N;
		m2 += ((float) x*x)/N;
	}
	cout << "     Avg.: " << m1 << endl;
	cout << "Std. dev.: " << sqrt(m2 - m1 * m1) << endl;
}
